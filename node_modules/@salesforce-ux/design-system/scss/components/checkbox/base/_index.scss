// Lightning Design System 2.15.8
// Copyright (c) 2015-present, salesforce.com, inc. All rights reserved
// Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license

@import 'deprecate';

/**
 * @summary Initializes checkbox
 *
 * @name base
 * @selector .slds-checkbox
 * @restrict span, label, div
 * @required
 * @support dev-ready
 * @variant
 */
.slds-checkbox {
  display: inline-block;
  position: relative;

  /**
   * @summary Creates a custom styled checkbox
   * @selector .slds-checkbox_faux
   * @restrict .slds-checkbox span
   */
  .slds-checkbox_faux,
  .slds-checkbox--faux {
    @include square($square-icon-medium-content);
    display: inline-block;
    position: relative;
    vertical-align: middle;
    // @todo consider shared hooks for inputs
    border-radius: var(--sds-c-checkbox-radius-border, $border-radius-small);
    // @todo consider shared hooks for inputs
    border-width: $border-width-thin;
    border-style: solid;
    // @todo consider shared hooks for inputs
    border-color: var(--sds-c-checkbox-color-border, $color-border-input);
    // @todo consider shared hooks for inputs
    background-color: var(--sds-c-checkbox-color-background, $color-background-input);
    box-shadow: var(--sds-c-checkbox-shadow);
    transition: border $duration-quickly linear, background-color $duration-quickly linear;
  }

  /**
   * @summary Container for faux checkbox, text, and slds-form-element__label
   * @selector .slds-checkbox__label
   * @restrict .slds-checkbox label
   */
  .slds-checkbox__label {

    // When slds-form-element__label is inline with slds-checkbox_faux, display as inline
    .slds-form-element__label {
      display: inline;
      vertical-align: middle;
      font-size: $font-size-3;
    }
  }

  [type="checkbox"] {
    @include square(1px);
    border: 0;
    clip: rect(0 0 0 0);
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    pointer-events: auto;

    &:checked + .slds-checkbox_faux,
    &:checked + .slds-checkbox--faux,
    &:checked ~ .slds-checkbox_faux,
    &:checked ~ .slds-checkbox--faux,
    &:checked + .slds-checkbox__label .slds-checkbox_faux,
    &:checked + .slds-checkbox__label .slds-checkbox--faux {
      /**
       * @todo re-evaluate Styling Hooks reassignment
       * @todo consider shared hooks / This shouldn't be required after reassignment is implemented
       *
       * Reassignment Workaround
       *
       * We want the checked state to have its own hooks but if these hooks are not used, it should
       * fallback to the base styles. Since reassignments are not currently supported, we have to
       * put in a workaround to mimic the reassignment behavior. If we don't, properties that
       * do not inherit (e.g. background-color) will use its initial value if the hook is not defined.
       *
       * When reassignments work, this should change to:
       * --sds-c-checkbox-color-border: var(--sds-c-checkbox-color-border-checked);
       *
       * Until reassignment is supported, we mimic it by falling back to the base hook and its fallback
       */
      border-color: var(--sds-c-checkbox-color-border-checked, var(--sds-c-checkbox-color-border, $color-border-input));
      background-color: var(--sds-c-checkbox-color-background-checked, var(--sds-c-checkbox-color-background, $color-background-input));

      &:after {
        display: block;
        content: '';
        height: ($square-icon-x-small-content / 2);
        width: $square-icon-x-small-content;
        position: absolute;
        top: 50%;
        /* stylelint-disable comment-empty-line-before */
        /*! @noflip */
        left: 50%;
        transform: translate3d(-50%, -50%, 0) rotate(-45deg);
        border-bottom: $border-width-thick solid var(--sds-c-checkbox-mark-color-foreground, $brand-accessible);

        /*! @noflip */
        border-left: $border-width-thick solid var(--sds-c-checkbox-mark-color-foreground, $brand-accessible);
      }
    }

    &:focus {

      + .slds-checkbox_faux,
      + .slds-checkbox--faux,
      ~ .slds-checkbox_faux,
      ~ .slds-checkbox--faux,
      + .slds-checkbox__label .slds-checkbox_faux,
      + .slds-checkbox__label .slds-checkbox--faux {
        // @todo re-evaluate Styling Hooks reassignment
        // @todo consider shared hooks for inputs
        border-color: var(--sds-c-checkbox-color-border-focus, $color-border-input-active);
        box-shadow: var(--sds-c-checkbox-shadow-focus, 0 0 3px $brand-accessible);
      }

      &:checked > .slds-checkbox_faux,
      &:checked > .slds-checkbox--faux,
      &:checked ~ .slds-checkbox_faux,
      &:checked ~ .slds-checkbox--faux,
      &:checked + .slds-checkbox__label .slds-checkbox_faux,
      &:checked + .slds-checkbox__label .slds-checkbox--faux {
        // @todo re-evaluate Styling Hooks reassignment
        // @todo consider shared hooks for inputs
        border-color: var(--sds-c-checkbox-color-border-focus, $color-border-input-active);
      }
    }

    &:indeterminate + .slds-checkbox_faux,
    &:indeterminate + .slds-checkbox--faux,
    &:indeterminate ~ .slds-checkbox_faux,
    &:indeterminate ~ .slds-checkbox--faux,
    &:indeterminate + .slds-checkbox__label .slds-checkbox_faux,
    &:indeterminate + .slds-checkbox__label .slds-checkbox--faux {
      // Reassignment Workaround - See :checked for explanation
      border-color: var(--sds-c-checkbox-color-border-checked, var(--sds-c-checkbox-color-border, $color-border-input));
      background-color: var(--sds-c-checkbox-color-background-checked, var(--sds-c-checkbox-color-background, $color-background-input));
    }

    &:indeterminate + .slds-checkbox_faux:after,
    &:indeterminate + .slds-checkbox--faux:after,
    &:indeterminate ~ .slds-checkbox_faux:after,
    &:indeterminate ~ .slds-checkbox--faux:after,
    &:indeterminate + .slds-checkbox__label .slds-checkbox_faux:after,
    &:indeterminate + .slds-checkbox__label .slds-checkbox--faux:after {
      content: '';
      display: block;
      position: absolute;
      top: 50%;

      /*! @noflip */
      left: 50%;
      width: $square-icon-x-small-content;
      height: 2px;
      border: 0;
      transform: translate3d(-50%, -50%, 0);
      background: var(--sds-c-checkbox-mark-color-foreground, $brand-accessible);
    }

    &[disabled] {

      + .slds-checkbox_faux,
      + .slds-checkbox--faux,
      ~ .slds-checkbox_faux,
      ~ .slds-checkbox--faux,
      + .slds-checkbox__label .slds-checkbox_faux,
      + .slds-checkbox__label .slds-checkbox--faux {
        // @todo consider shared hooks for inputs
        border-color: $color-border-input-disabled;
        // @todo consider shared hooks for inputs
        background-color: $color-background-input-disabled;

        &:after {
          // @todo consider shared hooks for inputs
          border-color: $color-gray-8;
        }
      }
    }
  }
}

.slds-has-error .slds-checkbox [type="checkbox"] {

  + .slds-checkbox_faux,
  + .slds-checkbox--faux,
  ~ .slds-checkbox_faux,
  ~ .slds-checkbox--faux,
  + .slds-checkbox__label .slds-checkbox_faux,
  + .slds-checkbox__label .slds-checkbox--faux {
    border-color: $color-border-error;
    border-width: $border-width-thick;
  }

  &:checked + .slds-checkbox_faux,
  &:checked + .slds-checkbox--faux,
  &:checked ~ .slds-checkbox_faux,
  &:checked ~ .slds-checkbox--faux,
  &:checked + .slds-checkbox__label .slds-checkbox_faux,
  &:checked + .slds-checkbox__label .slds-checkbox--faux {
    border-color: $color-border-error;

    &:after {
      border-color: $color-background-error;
    }
  }
}

// What is happening here? - BF
.slds-form-element .slds-checkbox [type="checkbox"] + .slds-checkbox_faux,
.slds-form-element .slds-checkbox [type="checkbox"] + .slds-checkbox--faux,
.slds-form-element .slds-checkbox [type="checkbox"] ~ .slds-checkbox_faux,
.slds-form-element .slds-checkbox [type="checkbox"] ~ .slds-checkbox--faux,
.slds-form-element .slds-checkbox [type="checkbox"] + .slds-checkbox__label .slds-checkbox_faux,
.slds-form-element .slds-checkbox [type="checkbox"] + .slds-checkbox__label .slds-checkbox--faux {
  margin-right: $spacing-x-small;
}
